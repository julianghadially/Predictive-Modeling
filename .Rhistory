Bayes = NULL
for (i in 1:50) {
Bayes = append(Bayes, sum(X_test[j,]*w_authors_train[i,]))
}
attributed.author = which(Bayes == max(Bayes))
#attributed.author
print(attributed.author)
}
for (j in 1:50) {
Bayes = NULL
for (i in 1:50) {
Bayes = append(Bayes, sum(X_test[j,]*w_authors_train[i,]))
}
attributed.author = which(Bayes == max(Bayes))
#attributed.author
print(attributed.author)
}
for (j in 1:200) {
Bayes = NULL
for (i in 1:50) {
Bayes = append(Bayes, sum(X_test[j,]*w_authors_train[i,]))
}
attributed.author = which(Bayes == max(Bayes))
#attributed.author
print(attributed.author)
}
authors_unique
authors_unique = unique(authors_train)
authors_unique
for (j in 1:200) {
Bayes = NULL
for (i in 1:50) {
Bayes = append(Bayes, sum(X_test[j,]*w_authors_train[i,]))
}
attributed.author = which(Bayes == max(Bayes))
#attributed.author
misclassifications = 0
if (attributed.author == test.authors[j]) {
print('1')
}
else:
print('0')
}
for (j in 1:200) {
Bayes = NULL
for (i in 1:50) {
Bayes = append(Bayes, sum(X_test[j,]*w_authors_train[i,]))
}
attributed.author = which(Bayes == max(Bayes))
#attributed.author
misclassifications = 0
if (attributed.author == test.authors[j]) {
print('1')
}
else{print('0')}
}
test.authors[1]
test.authors[2]
test.authors[3]
for (j in 1:200) {
Bayes = NULL
for (i in 1:50) {
Bayes = append(Bayes, sum(X_test[j,]*w_authors_train[i,]))
}
attributed.author = which(Bayes == max(Bayes))
attributed.author = authors_unique[attributed.author]
#attributed.author
misclassifications = 0
if (attributed.author == test.authors[j]) {
print('1')
}
else{print('0')}
}
for (j in 1:200) {
Bayes = NULL
for (i in 1:50) {
Bayes = append(Bayes, sum(X_test[j,]*w_authors_train[i,]))
}
attributed.author = which(Bayes == max(Bayes))
attributed.author = authors_unique[attributed.author]
print(attributed.author)
misclassifications = 0
#if (attributed.author == test.authors[j]) {
#print('1')
#}
#else{print('0')}
}
head(test.authors)
test.stories.and.authors.list = read.directory.of.directories('Data/ReutersC50/C50test', first = 25)
test.all.stories = test.stories.and.authors.list[[1]]
test.authors = test.stories.and.authors.list[2]
test.authors = test.authors[[1]]
source('Data/textutils.R')
test.stories.and.authors.list = read.directory.of.directories('Data/ReutersC50/C50test', first = 25)
test.all.stories = test.stories.and.authors.list[[1]]
test.authors = test.stories.and.authors.list[2]
test.authors = test.authors[[1]]
for (j in 1:200) {
Bayes = NULL
for (i in 1:50) {
Bayes = append(Bayes, sum(X_test[j,]*w_authors_train[i,]))
}
attributed.author = which(Bayes == max(Bayes))
attributed.author = authors_unique[attributed.author]
print(attributed.author)
misclassifications = 0
#if (attributed.author == test.authors[j]) {
#print('1')
#}
#else{print('0')}
}
for (j in 1:200) {
Bayes = NULL
for (i in 1:50) {
Bayes = append(Bayes, sum(X_test[j,]*w_authors_train[i,]))
}
attributed.author = which(Bayes == max(Bayes))
attributed.author = authors_unique[attributed.author]
print(attributed.author)
misclassifications = 0
if (attributed.author == test.authors[j]) {
print('1')
}
else{print('0')}
}
for (j in 1:200) {
Bayes = NULL
for (i in 1:50) {
Bayes = append(Bayes, sum(X_test[j,]*w_authors_train[i,]))
}
attributed.author = which(Bayes == max(Bayes))
attributed.author = authors_unique[attributed.author]
print(attributed.author)
goodclassifications = 0
misclassifications = 0
if (attributed.author == test.authors[j]) {
goodclassifications = goodclassifications + 1
}
else{misclassifications = misclassifications + 1}
}
goodclassifications
misclassifications
goodclassifications = 0
misclassifications = 0
for (j in 1:200) {
Bayes = NULL
for (i in 1:50) {
Bayes = append(Bayes, sum(X_test[j,]*w_authors_train[i,]))
}
attributed.author = which(Bayes == max(Bayes))
attributed.author = authors_unique[attributed.author]
#print(attributed.author)
if (attributed.author == test.authors[j]) {
goodclassifications = goodclassifications + 1
}
else{misclassifications = misclassifications + 1}
}
good
goodclassifications
misclassifications
goodclassifications/sum(goodclassifications, misclassifications)
smooth_count = 1/nrow(X_train)
w_authors_train = rowsum(X_train + smooth_count, authors_train)
#rowSums
w_authors_train = w_all/rowSums(w_all)
#w_authors_train = w_authors_train/sum(w_authors_train)
w_authors_train = log(w_authors_train)
goodclassifications = 0
misclassifications = 0
for (j in 1:2500) {
Bayes = NULL
for (i in 1:50) {
Bayes = append(Bayes, sum(X_test[j,]*w_authors_train[i,]))
}
attributed.author = which(Bayes == max(Bayes))
attributed.author = authors_unique[attributed.author]
#print(attributed.author)
if (attributed.author == test.authors[j]) {
goodclassifications = goodclassifications + 1
}
else{misclassifications = misclassifications + 1}
}
goodclassifications/sum(goodclassifications, misclassifications)
smooth_count = 1/nrow(X_train)
w_authors_train = rowsum(X_train + smooth_count, authors_train)
#rowSums
#w_authors_train = w_all/rowSums(w_all)
w_authors_train = w_authors_train/sum(w_authors_train)
w_authors_train = log(w_authors_train)
class(DTM)
50%50
50//50
50%5
50%%10
50%%50
goodclassifications = 0
misclassifications = 0
misclass_per_author = NULL
for (j in 1:2500) {
Bayes = NULL
for (i in 1:50) {
Bayes = append(Bayes, sum(X_test[j,]*w_authors_train[i,]))
}
attributed.author = which(Bayes == max(Bayes))
attributed.author = authors_unique[attributed.author]
#print(attributed.author)
if (attributed.author == test.authors[j]) {
goodclassifications = goodclassifications + 1
}
else{misclassifications = misclassifications + 1}
if (j%%50 == 0) {
misclass_per_author = append(misclass_per_author, goodclassifications/sum(goodclassifications, misclassifications))
misclassifications = 0
goodclassifications = 0
}
}
plot(misclass_per_author)
mpa.df = dataframe(x = author_unique, y = misclass_per_author)
mpa.df = data.frame(x = author_unique, y = misclass_per_author)
mpa.df = data.frame(x = authors_unique, y = misclass_per_author)
mpa.df
head(w_authors_train)
head(X_train)
?prcomp
PC_X_train = prcomp(X_train)
PC_X_train
PC_X_train = prcomp(X_train, center = TRUE, scale = TRUE)
pr.var = PC_X_train$sdev^2
pr.ve = pr.var/sum(pr.var)
PC_X_train
str(pr.ve)
pr.ve[1:100]
sum(pr.ve[1:100])
sum(pr.ve[1:200])
sum(pr.ve[1:500])
sum(pr.ve[1:100])
sum(pr.ve[1:50])
head(PC_X_train[1:50])
head(PC_X_train$x[,1])
PC_X_train$x[,1]
head(PC_X_train$x[,1:10])
library(randomForest)
?randomForest
rf.tree = randomForest(x = PC_X_train$x[,1:50], y = authors_train, ntree = 50, mtry = 4)
factor(authors_train)
rf.tree = randomForest(x = PC_X_train$x[,1:50], y = factor(authors_train), ntree = 50, mtry = 4)
PC_X_test = prcomp(X_test, center = TRUE, scale = TRUE)
yhat = predict(rf.tree, newx = PC_X_test$x[,1:50])
yhat
sum(yhat == test.authors)
sum(yhat == test.authors) + sum(yhat!= test.authors)
sum(yhat == test.authors) / (sum(yhat!= test.authors) + sum(yhat == test.authors))
length(PC_X_train$x)
dim(PC_X_train$x)
goodclassifications = 0
misclassifications = 0
misclass_per_author = NULL
for (i in 1:len(yhat)) {
if (yhat[i] == test.authors[i]) {
goodclassifications = goodclassifications + 1
}
else{misclassifications = misclassifications + 1}
if (i%%50 == 0) {
misclass_per_author = append(misclass_per_author, goodclassifications/sum(goodclassifications, misclassifications))
misclassifications = 0
goodclassifications = 0
}
}
length(yhat)
goodclassifications = 0
misclassifications = 0
misclass_per_author = NULL
for (i in 1:length(yhat)) {
if (yhat[i] == test.authors[i]) {
goodclassifications = goodclassifications + 1
}
else{misclassifications = misclassifications + 1}
if (i%%50 == 0) {
misclass_per_author = append(misclass_per_author, goodclassifications/sum(goodclassifications, misclassifications))
misclassifications = 0
goodclassifications = 0
}
}
misclass_per_author
mpa.df = data.frame(x = authors_unique, y = misclass_per_author)
mpa.df
AUS = read.csv('Data/Abia.csv')
hist(AUS$DepDelay)
bwplot(DepDelay~cut(CRSDepTime, 5), data = AUS)
library(mosaic)
bwplot(DepDelay~cut(CRSDepTime, 5), data = AUS)
names(AUS)
bwplot(DepDelay~cut(CRSDepTime, 7), data = AUS)
bwplot(DepDelay~cut(CRSDepTime, 5), data = AUS)
library(timeDate)
head(AUS)
?as.POSIXct()
?strptime
strptime(AUS$DepDelay, format = "%H:%M")
head(strptime(as.character(AUS$DepDelay), format = "%H:%M"))
as.character(c(1,3,5))
head(as.character(AUS$DepDelay))
head(AUS$DepDelay)
head(AUS)
head(US$DepDelay%%60)
head(AUS$DepDelay%%60)
head(strptime(as.character(AUS$CRSDepTime), format = "%H:%M"))
AUS$CRSDepTime[1:10]
as.character(AUS$CRSDepTime)[1:10]
strptime(as.character(AUS$CRSDepTime), format = "%H:%M")[1:10]
strptime("1230", format = "%H:%M")
strptime("1230", format = "%H%M")
strptime(as.character(AUS$CRSDepTime), format = "%H%M")[1:10]
strptime(as.character(AUS$CRSDepTime), format = "%H%M", usetz = FALSE)[1:10]
strptime(as.character(AUS$CRSDepTime), format = "%H%M", tz = FALSE)[1:10]
strptime(as.character(AUS$CRSDepTime), format = "%H%M", usetz = FALSE)[1:10]
as.character(AUS$CRSDepTime)[:-1]
head(format(AUS$CRSDepTime, "%H%M"))
head(as.character(AUS$CRSDepTime/100))
head(as.character(as.integer(AUS$CRSDepTime)/100))
head(as.character(as.integer(AUS$CRSDepTime)/as.integer(100)))
1935/100
1935//100
1935%/%100
head(as.character(AUS$CRSDepTime%/%100))
AUS$CRSDepTime = as.character(AUS$CRSDepTime%/%100)
bwplot(DepDelay~cut(CRSDepTime, 5), data = AUS)
bwplot(DepDelay~factor(CRSDepTime), data = AUS)
summary(DepDelay~factor(CRSDepTime))
?aggregate
aggregate(DepDelay~CRSDepTime, data = AUS, FUN = mean)
plot(df)
plot(x = df$CRSDepTime, y = df$DepDelay)
library(ggplot2)
?"ggplot2"
?"ggplot"
?gplot2
?"ggplot2"
library(ggplot2)
?"ggplot2"
?qplot
qplot(x = CRSDepTime, y = DepDelay, data = df)
qplot(x = df$CRSDepTime, y = df$DepDelay, data = df)
qplot(x = df$CRSDepTime, y = df$DepDelay)
qplot(x = as.integer(df$CRSDepTime), y = df$DepDelay)
qplot(x = factor(df$CRSDepTime), y = df$DepDelay)
df$CRSDepTime
df = aggregate(DepDelay~CRSDepTime, data = AUS, FUN = mean)
df
df[1]
qplot(x = df[1], y = df[2])
qplot(x = factor(df[1]), y = df[2])
plot(x = factor(df[1]), y = df[2])
df[1]
df = aggregate(DepDelay~factor(CRSDepTime), data = AUS, FUN = mean)
qplot(x = factor(df[1]), y = df[2])
qplot(x = df[1], y = df[2])
?qplot
df[1]
df[2]
df[[2]]
qplot(x = df[[1]], y = df[[2]])
df[[1]]
df = aggregate(DepDelay~CRSDepTime, data = AUS, FUN = mean)
df[[1]]
data.frame(x = df[[1]], y = df[[2]]))
data.frame(x = df[[1]], y = df[[2]])
data.frame(x = df[[1]], y = df[[2]], names = c('DepHour', 'Delay'))
?data.frame
data.frame('DepHour' = df[[1]], 'Delay' = df[[2]])
?order
df = data.frame('DepHour' = df[[1]], 'Delay' = df[[2]])
order(df)
qplot(x = df$DepHour, y = df$Delay)
df = df[2:,]
df = df[2:20,]
df
tmp = rbind(df[16:20], df[1:15])
tmp = rbind(df[16:20,], df[1:15,])
tmp
df = rbind(df[16:20,], df[2:15,])
df
df = aggregate(DepDelay~CRSDepTime, data = AUS, FUN = mean)
df = data.frame('DepHour' = df[[1]], 'Delay' = df[[2]])
df = df[2:20,]
df = rbind(df[16:20,], df[2:15,])
df
df = aggregate(DepDelay~CRSDepTime, data = AUS, FUN = mean)
df = data.frame('DepHour' = df[[1]], 'Delay' = df[[2]])
df = rbind(df[16:20,], df[2:15,])
df
qplot(x = df$DepHour, y = df$Delay)
qplot(x = df[1], y = df[2])
qplot(x = df[[1]], y = df[[2]])
rbind
?rbind
df = (rbind(df[16:20,], df[2:15,])
df = rbind(df[16:20,], df[2:15,])
df = rbind(df[16:20,], df[2:15,])
l1 = df[[1]]
l2 = df[[2]]
l1
bwplot(DepDelay~factor(CRSDepTime), data = AUS)
df = aggregate(DepDelay~CRSDepTime, data = AUS, FUN = mean)
df = data.frame('DepHour' = df[[1]], 'Delay' = df[[2]])
df = rbind(df[16:20,], df[2:15,])
l1 = df[[1]]
l2 = df[[2]]
l1
df = data.frame('DepHour' = l1, 'Delay' = l2)
qplot(x = df[[1]], y = df[[2]])
df
qplot(x = l1, y = l2)
qplot(x = as.character(l1), y = l2)
qplot(x = df[[1]], y = df[[2]], xlab('Departure Hour'), ylab('Average Delay (min)', main = 'Delays by hour'))
qplot(x = df$DepHour, y = df$Delay, xlab('Departure Hour'), ylab('Average Delay (min)', main = 'Delays by hour'))
df2 = data.frame('DepHour' = l1, 'Delay' = l2)
qplot(x = df2$DepHour, y = df2$Delay, xlab('Departure Hour'), ylab('Average Delay (min)', main = 'Delays by hour'))
qplot(x = df2$DepHour, y = df2$Delay, xlab = 'Departure Hour', ylab = 'Average Delay (min)', main = 'Delays by hour'))
qplot(x = df2$DepHour, y = df2$Delay, xlab = 'Departure Hour', ylab = 'Average Delay (min)', main = 'Delays by hour')
?geom_line
qplot(x = df2$DepHour, y = df2$Delay, xlab = 'Departure Hour', ylab = 'Average Delay (min)', main = 'Delays by hour') + geom_line()
?geom_point
qplot(x = df2$DepHour, y = df2$Delay, xlab = 'Departure Hour', ylab = 'Average Delay (min)', main = 'Delays by hour') + geom_point() + geom_line()
qplot(x = df2$DepHour, y = df2$Delay, xlab = 'Departure Hour', ylab = 'Average Delay (min)', main = 'Delays by hour') + geom_point() + geom_line(stat = 'identity')
qplot(x = df2$DepHour, y = df2$Delay, xlab = 'Departure Hour', ylab = 'Average Delay (min)', main = 'Delays by hour') + geom_point() + geom_bar(stat = 'identity')
df = data.frame('DepHour' = df[[1]], 'Delay' = df[[2]], 'Airline' = rep('All', length(df[[2]])))
df
names(AUS)
head(AUS$UniqueCarrier)
df = aggregate(DepDelay~CRSDepTime + UniqueCarrier, data = AUS, FUN = mean)
df
df = data.frame('DepHour' = df[[1]], 'Delay' = df[[2]], 'Airline' = df$UniqueCarrier)
df
df = aggregate(DepDelay~CRSDepTime + UniqueCarrier, data = AUS, FUN = mean)
df = data.frame('DepHour' = df[[1]], 'Delay' = df[[3]], 'Airline' = df$UniqueCarrier)
df
which(df$Airline == c('AA','CO','DL','UA', 'WN'))
mask = df$Airline == c('AA','CO','DL','UA', 'WN')
mask = df$Airline in c('AA','CO','DL','UA', 'WN')
mask = df$Airline %in% c('AA','CO','DL','UA', 'WN')
mask
df = df[mask,]
df
?qplot
ggplot2(data = df, aes(DepHour, Delay)) + geom_line(aes(color = Airline, group = Airline))
library(ggplot2)
ggplot2(data = df, aes(DepHour, Delay)) + geom_line(aes(color = Airline, group = Airline))
ggplot(data = df, aes(DepHour, Delay)) + geom_line(aes(color = Airline, group = Airline))
ggplot(data = df, aes(DepHour, Delay), xlab = 'Departure Hour', ylab = 'Average Delay (min)', main = 'Delays by hour') + geom_line(aes(color = Airline, group = Airline))
ggplot(data = df, aes(DepHour, Delay), xlab = 'Departure Hour', ylab = 'Average Delay (min)', main = 'Delays by hour') + geom_line(aes(color = Airline, group = Airline))
?theme
?element_test
?element_text
ggplot(data = df, aes(DepHour, Delay)) + geom_line(aes(color = Airline, group = Airline)) + theme(axis.title.x = 'Departure Hour')
?theme
?text
ggplot(data = df, aes(DepHour, Delay)) + geom_line(aes(color = Airline, group = Airline)) + theme(axis.title = text(x = 'Departure Hour'))
ggplot(data = df, aes(DepHour, Delay)) + geom_line(aes(color = Airline, group = Airline)) + xlab('Departure Hour') + ylab('Average Delay (min)')
ggplot(data = df, aes(DepHour, Delay)) + geom_line(aes(color = Airline, group = Airline)) + xlab('Departure Hour') + ylab('Average Delay (min)') + title('Delays by Airline')
ggplot(data = df, aes(DepHour, Delay)) + geom_line(aes(color = Airline, group = Airline)) + xlab('Departure Hour') + ylab('Average Delay (min)') + main('Delays by Airline')
ggplot(data = df, aes(DepHour, Delay)) + geom_line(aes(color = Airline, group = Airline)) + xlab('Departure Hour') + ylab('Average Delay (min)') + title('Delays by Airline')
?labs
ggplot(data = df, aes(DepHour, Delay)) + geom_line(aes(color = Airline, group = Airline)) + xlab('Departure Hour') + ylab('Average Delay (min)') + ggtitle('Delays by Airline')
?legend
?theme
ggplot(data = df, aes(DepHour, Delay)) + geom_line(aes(color = Airline, group = Airline)) + xlab('Departure Hour') + ylab('Average Delay (min)') + ggtitle('Delays by Airline') + scale_fill_discrete(name="Airlines", breaks=c('AA','CO','DL','UA', 'WN'), labels=c("American", "Continental", "Delta", "United", "SW"))
ggplot(data = df, aes(DepHour, Delay)) + geom_line(aes(color = Airline, group = Airline)) + xlab('Departure Hour') + ylab('Average Delay (min)') + ggtitle('Delays by Airline') + scale_color_discrete(name="Airlines", breaks=c('AA','CO','DL','UA', 'WN'), labels=c("American", "Continental", "Delta", "United", "SW"))
df = aggregate(DepDelay~CRSDepTime + UniqueCarrier, data = AUS, FUN = mean)
df = data.frame('DepHour' = df[[1]], 'Delay' = df[[3]], 'Airline' = df$UniqueCarrier)
mask = df$Airline %in% c('AA','CO','DL','UA')
df = df[mask,]
ggplot(data = df, aes(DepHour, Delay)) + geom_line(aes(color = Airline, group = Airline)) + xlab('Departure Hour') + ylab('Average Delay (min)') + ggtitle('Delays by Airline') + scale_color_discrete(name="Airlines", breaks=c('AA','CO','DL','UA'), labels=c("American", "Continental", "Delta", "United"))
?scale_color_manual
ggplot(data = df, aes(DepHour, Delay)) + geom_line(aes(color = Airline, group = Airline)) + xlab('Departure Hour') + ylab('Average Delay (min)') + ggtitle('Delays by Airline') + scale_color_discrete(name="Airlines", breaks=c('AA','CO','DL','UA'), labels=c("American", "Continental", "Delta", "United")) + scale_colour_manual(values = c('red','blue','purple','black'))
ggplot(data = df, aes(DepHour, Delay)) + geom_line(aes(color = Airline, group = Airline)) + xlab('Departure Hour') + ylab('Average Delay (min)') + ggtitle('Delays by Airline') + scale_color_discrete(name="Airlines", breaks=c('AA','CO','DL','UA'), labels=c("American", "Continental", "Delta", "United")) + scale_colour_manual(values = c('red','blue','yellow','black'))
ggplot(data = df, aes(DepHour, Delay)) + geom_line(aes(color = Airline, group = Airline)) + xlab('Departure Hour') + ylab('Average Delay (min)') + ggtitle('Delays by Airline') + scale_color_discrete(name="Airlines", breaks=c('AA','CO','DL','UA'), labels=c("American", "Continental", "Delta", "United")) + scale_colour_manual(values = c('red','blue','orange','black'))
sum(df$Airline == 'UA')
sum(df$Airline == 'AA')
sum(df$Airline == 'CO')
sum(AUS$UniqueCarrier == 'CO')
sum(AUS$UniqueCarrier == 'UA')
sum(AUS$UniqueCarrier == 'Delta')
sum(AUS$UniqueCarrier == 'DL')
qplot(x = df2$DepHour, y = df2$Delay, xlab = 'Departure Hour', ylab = 'Average Delay (min)', main = 'Delays by hour') + geom_point() + geom_bar(stat = 'identity')
inspect(basketrules)
library(arules)
groceries = readLines('Data/groceries.txt')
groceries = lapply(groceries, strsplit, split = ',', fixed = TRUE)
groceries = unlist(groceries, recursive = FALSE)
grocerytrans = as(groceries, 'transactions')
basketrules <- apriori(grocerytrans,
parameter=list(support=.01, confidence=.5, lift = .5, maxlen=4))
basketrules <- apriori(grocerytrans,
parameter=list(support=.01, confidence=.5, maxlen=4))
inspect(basketrules)
inspect(basketrules, lift >= 2)
inspect(basketrules, lift >= 3)
inspect(basketrules, lift = 3)
basketrules <- apriori(grocerytrans,
parameter=list(support=.001, confidence=.5, maxlen=4))
inspect(basketrules, subset = lift > 5)
basketrules <- apriori(grocerytrans,
parameter=list(support=.01, confidence=.5, maxlen=4))
inspect(basketrules,  subset = lift > 5)
inspect(subset(basketrules,  subset = lift > 3))
inspect(subset(basketrules, subset = lift > 4))
basketrules <- apriori(grocerytrans,
parameter=list(support=.001, confidence=.5, maxlen=4))
inspect(subset(basketrules, subset = lift > 4))
inspect(subset(basketrules, subset = lift > 7))
inspect(subset(basketrules, subset = lift > 10))
